from trading.get_account_info import get_all_stat, get_my_order, get_all_currency, get_all_securities, get_my_operations
from main import dp, bot
from aiogram.types import Message
from aiogram.dispatcher.filters import Text
from trading.get_securities import security_name_by_figi
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from trading.place_order import cancel_order
from config.personal_data import get_account_access

"""

    –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á—ë—Ç–µ

"""

"""

    –ë–∞–ª–∞–Ω—Å

"""


@dp.message_handler(Text(contains="–±–∞–ª–∞–Ω—Å", ignore_case=True))
async def get_balance(message: Message):
    currency_df = get_all_currency(message.from_user.id)

    await message.answer(f"üí∏<b>–î–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–ª—é—Ç–∞</b>üí∏")

    text = ""

    for i in currency_df.index:

        if currency_df['exchange_rate'][i] != 0.0 and currency_df['exchange_rate'][i] != 1.0:
            text += (
                f"<b>{currency_df['name'][i]}</b>\n"
                f"{round(currency_df['sum'][i], 2)}{currency_df['sign'][i]} <i>({round(currency_df['sum_in_ruble'][i], 2)}‚ÇΩ)</i>\n\n")
        else:
            text += (
                f"<b>{currency_df['name'][i]}</b>\n"
                f"{round(currency_df['sum'][i], 2)}{currency_df['sign'][i]}\n\n")

    if text:
        await message.answer(text=text)
    else:
        await message.answer(text="–£ –í–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤!")


"""

    –ë—É–º–∞–≥–∏

"""


@dp.message_handler(Text(contains="–±—É–º–∞–≥–∏", ignore_case=True))
async def get_share(message: Message):
    security_df = get_all_securities(message.from_user.id)

    empty_portfolio = True
    await message.answer(f"üíº–¶–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µüíº")

    for i in security_df.index:

        inst = ""

        if security_df['instrument'][i] == "share":
            inst = "–ê–∫—Ü–∏–∏"
            empty_portfolio = False

        elif security_df['instrument'][i] == "bond":
            inst = "–ë–æ–Ω–¥—ã"
            empty_portfolio = False

        elif security_df['instrument'][i] == "etf":
            inst = "ETF"
            empty_portfolio = False

        elif security_df['instrument'][i] == "currency":
            continue

        elif security_df['instrument'][i] == "future":
            inst = "–§—å—é—á–µ—Ä—Å—ã"
            empty_portfolio = False

        if security_df['exp_yield'][i] >= 0:
            exp_yield = f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {round(security_df['exp_yield'][i], 2)}‚ÇΩ"
        else:
            exp_yield = f"–û–∂–∏–¥–∞–µ–º–∞—è —É–±—ã–ª—å: {round(security_df['exp_yield'][i], 2)}‚ÇΩ"

        await message.answer(
            f"üßæ<b>{inst} {security_df['security_name'][i]}</b>\n"
            f"FIGI: {security_df['figi'][i]}\n\n"
            f"–õ–æ—Ç–æ–≤: {int(security_df['lots'][i])}\n"
            f"–í—Å–µ–≥–æ: {round(security_df['quantity'][i], 2)}\n\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {security_df['average_price'][i]}{security_df['currency_sign'][i]}\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ FIFO: {security_df['average_price_fifo'][i]}{security_df['currency_sign'][i]}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {round(security_df['current_price'][i], 6)}{security_df['currency_sign'][i]}\n\n"
            f"–ù–ö–î: {security_df['nkd'][i]}{security_df['currency_sign'][i]}\n"
            f"{exp_yield}{security_df['currency_sign'][i]}\n"
        )

    if empty_portfolio:
        await message.answer(f"–£ –í–∞—Å –Ω–µ—Ç —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ!")


"""

    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á—ë—Ç—É

"""


@dp.message_handler(Text(contains="—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", ignore_case=True))
async def get_stat(message: Message):
    await message.answer(f"üìà<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á—ë—Ç—É</b>üìâ ")

    stat = get_all_stat(message.from_user.id)

    # –ü–æ—Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –±—É–º–∞–≥
    sum = stat['sum_total'][0]

    # –ü–µ—Ä–µ–≤–µ–¥—ë–º –¥–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫ –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ —Ä—É–±–ª–∏
    dif = round(sum - (sum / (100 + stat['exp_yield'][0])) * 100, 2)

    if dif >= 0:
        dif_text = f"<b>–ü—Ä–∏–±—ã–ª—å</b>: {dif}‚ÇΩ ({stat['exp_yield'][0]}%)"
    else:
        dif_text = f"<b>–£–±—ã–ª—å</b>: {dif}‚ÇΩ ({stat['exp_yield'][0]}%)"

    await message.answer(
        f"<b>–ê–∫—Ü–∏–∏</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_shares'][0]}‚ÇΩ\n"
        f"<b>–ë–æ–Ω–¥—ã</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_bonds'][0]}‚ÇΩ\n"
        f"<b>ETF</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_etf'][0]}‚ÇΩ\n"
        f"<b>–í–∞–ª—é—Ç–∞</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_curr'][0]}‚ÇΩ\n"
        f"<b>–§—å—é—á–µ—Ä—Å—ã</b> –Ω–∞ —Å—É–º–º—É: {stat['sum_fut'][0]}‚ÇΩ\n\n"
        f"<b>–ò—Ç–æ–≥–æ</b>: {round(sum, 2)}‚ÇΩ\n"
        f"{dif_text}\n"

    )


'''
    –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
'''


@dp.message_handler(Text(contains="–æ—Ä–¥–µ—Ä", ignore_case=True))
async def get_orders(message: Message):
    order_df = get_my_order(message.from_user.id)

    await message.answer(f"üìã–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞üìã")

    no_orders = True

    for i in order_df.index:

        no_orders = False

        cancel_order_keyboard = InlineKeyboardMarkup()
        if get_account_access(user_id=message.from_user.id) == 1:
            cancel_order_keyboard.add(InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä", callback_data=f"cancel_order:{order_df['order_id'][i]}"))

        if order_df['direction'][i] == 2:
            direction = "–ü—Ä–æ–¥–∞–∂–∞"
        else:
            direction = "–ü–æ–∫—É–ø–∫–∞"

        await message.answer(
            f"‚úÖ<b>{direction}</b> –±—É–º–∞–≥ {security_name_by_figi(order_df['figi'][i], message.from_user.id)}\n"
            f"–û—Ç–∫—Ä—ã—Ç: {order_df['order_date'][i]}\n\n"
            f"ID: {order_df['order_id'][i]}\n\n"
            f"FIGI: {order_df['figi'][i]}\n\n"
            f"–õ–æ—Ç–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {order_df['lots_req'][i]}\n"
            f"–õ–æ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {order_df['lots_ex'][i]}\n\n"
            f"–°—É–º–º–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {order_df['sum_req'][i]}{order_df['currency_sign'][i]}\n"
            f"–°—É–º–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {order_df['sum_ex'][i]}{order_df['currency_sign'][i]}\n\n"
            f"–¶–µ–Ω–∞ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏: {round(order_df['price_one'][i], 6)}{order_df['currency_sign'][i]}\n\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: {round(order_df['commission'][i], 3)}{order_df['currency_sign'][i]}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {round(order_df['serv_commission'][i], 3)}{order_df['currency_sign'][i]}\n\n"
            f"–ò—Ç–æ–≥–æ: {order_df['sum_total'][i]}{order_df['currency_sign'][i]}\n",
            reply_markup=cancel_order_keyboard
        )
    if no_orders:
        await message.answer(text="–£ –í–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤!")


'''
    –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ id
'''


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('cancel_order'))
async def close_order(callback_query):
    data = callback_query.data.split(":")
    order_id = data[1]

    await cancel_order(order_id=order_id, user_id=callback_query.from_user.id)

    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,
                                text="‚ùå–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω‚ùå")


'''
    –û–ø–µ—Ä–∞—Ü–∏–∏
'''


@dp.message_handler(Text(contains="–æ–ø–µ—Ä–∞—Ü–∏–∏", ignore_case=True))
async def get_operations(message: Message):

    try:
        operations = get_my_operations(user_id=message.from_user.id)
    except:
        await message.answer("–û—à–∏–±–∫–∞!")

    else:
        if operations:
            await message.answer(f"–í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:")

            with open(f"img/operations/all_operations_{message.from_user.id}.png", "rb") as operations_img:
                await bot.send_photo(chat_id=message.from_user.id, photo=operations_img)

        else:
            await message.answer(f"–£ –í–∞—Å –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π!")
