from main import dp, bot
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from trading.get_securities import get_security_list
from trading.place_order import buy_order
from trading.trade_help import get_price_figi, get_currency_sing
from config.personal_data import get_account_access

"""

    –¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –ø–æ–∏—Å–∫ –±—É–º–∞–≥

"""

"""
    –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
"""


class SearchSFB(StatesGroup):
    wait_sfb = State()


"""
    –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
"""


@dp.message_handler(text="–ü–æ–∏—Å–∫")
async def search_start(callback_query):
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–º–∞–≥–∏ –∏–ª–∏ FIGI:")
    await SearchSFB.wait_sfb.set()


"""
    –ñ–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ FIGI –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –±—É–º–∞–≥–µ
"""


@dp.message_handler(state=SearchSFB.wait_sfb)
async def search_finish(message: Message, state: FSMContext):
    security_list = get_security_list(user_id=message.from_user.id, name=message.text)
    if len(security_list) != 0:
        for security in security_list:

            choose_share_keyboard = InlineKeyboardMarkup()
            choose_share_keyboard.add(
                InlineKeyboardButton(text=f"–ê–Ω–∞–ª–∏–∑",
                                     callback_data=f"str1:stat:show:{message.from_user.id}:{security.figi}"))
            if get_account_access(user_id=message.from_user.id) == 1:
                choose_share_keyboard.add(
                    InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å 1 –ª–æ—Ç", callback_data=f"sfb:buy_now:{security.figi}"))

            try:
                inst_type = security.instrument_type

                if inst_type == "share":
                    inst = "–ê–∫—Ü–∏–∏"
                elif inst_type == "future":
                    inst = "–§—å—é—á–µ—Ä—Å—ã"
                elif inst_type == "bond":
                    inst = "–ë–æ–Ω–¥—ã"
                elif inst_type == "etf":
                    inst = "ETF"
                elif inst_type == "currency":
                    inst = "–í–∞–ª—é—Ç–∞"
                else:
                    inst = inst_type

            except:
                inst = "–ê–∫—Ü–∏–∏"

            await message.answer(
                text=
                f"üßæ<b>{inst} {security.name}</b>\n"
                f"FIGI: {security.figi}\n\n"
                f"–ë—É–º–∞–≥ –≤ –ª–æ—Ç–µ: {security.lot}\n"
                f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±—É–º–∞–≥–∏: {round(get_price_figi(user_id=message.from_user.id, figi=security.figi), 4)}{get_currency_sing(security.currency)}\n"
                f"–ò—Ç–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(security.lot * get_price_figi(user_id=message.from_user.id, figi=security.figi), 4)}{get_currency_sing(security.currency)}\n"
                , reply_markup=choose_share_keyboard)

            await state.finish()
    else:
        await bot.send_message(chat_id=message.from_user.id, text=f"–¢–∞–∫–æ–π –±—É–º–∞–≥–∏ –Ω–µ—Ç!")
        await bot.send_message(chat_id=message.from_user.id, text=f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':")
        return 0


"""

    –ë—É–º–∞–≥–∏

"""


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('sfb:buy_now:'))
async def search_buy_now(callback_query):
    data = callback_query.data.split(":")
    figi = data[2]

    order = buy_order(figi=figi, user_id=callback_query.from_user.id, quantity_lots=1, price=0.0, via="bot")

    if order:
        await bot.send_message(chat_id=callback_query.from_user.id, text=f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    else:
        await bot.send_message(chat_id=callback_query.from_user.id, text="–û—à–∏–±–∫–∞! –í–µ—Ä–æ—è—Ç–Ω–æ, —É –í–∞—Å –º–∞–ª–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ!")

