from main import dp, bot
from trading.get_account_info import get_lots_portfolio
from tinkoff.invest import Client
from trading.trade_help import is_in_portfolio, get_price_figi
from config.personal_data import get_account, get_token
from trading.place_order import sell_sfb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from trading.get_account_info import get_currency_sing, get_price_in_portfolio
from aiogram.types import Message
from bot.keyboards.start_menu_keyboard import get_start_menu
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup
from aiogram import types
from trading.trade_help import in_lot_figi
from trading.get_securities import security_name_by_figi
from trading.check_av import check_time
from config.personal_data import get_account_type, get_account_access
from trading.trade_help import quotation_to_float
from trading.trade_help import get_currency_sing

"""

    –¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É –±—É–º–∞–≥

"""

"""
    –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
"""


class SellOrder(StatesGroup):
    s_wait_figi = State()
    s_wait_quantity = State()
    s_wait_price = State()


"""
    –ü–µ—Ä–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
"""


@dp.message_handler(text="–ü—Ä–æ–¥–∞—Ç—å")
async def start_sell(message):
    if get_account_access(message.from_user.id) == 1:

        empty_portfolio = True

        user_id = message.from_user.id

        with Client(get_token(message.from_user.id)) as client:

            if get_account_type(message.from_user.id) == "sandbox":
                portfolio = client.sandbox.get_sandbox_portfolio(account_id=get_account(message.from_user.id))
            else:
                portfolio = client.operations.get_portfolio(account_id=get_account(message.from_user.id))

            for i in portfolio.positions:
                if i.instrument_type != "currency":
                    empty_portfolio = False

                    sell_keyboard = InlineKeyboardMarkup()
                    sell_keyboard.add(InlineKeyboardButton(text=f"–ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell:figi:{i.figi}"))

                    if i.instrument_type == "share":
                        inst = "–ê–∫—Ü–∏–∏"
                    elif i.instrument_type == "bond":
                        inst = "–ë–æ–Ω–¥—ã"
                    elif i.instrument_type == "future":
                        inst = "–§—å—é—á–µ—Ä—Å—ã"
                    elif i.instrument_type == "etf":
                        inst = "ETF"
                    else:
                        inst = i.instrument_type

                    if get_account_type(message.from_user.id) == "sandbox":
                        text = f"üßæ<b>{inst} {security_name_by_figi(figi=i.figi, user_id=user_id)}</b>\n"\
                        f"FIGI: {i.figi}\n\n"\
                        f"–õ–æ—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {int(quotation_to_float(i.quantity_lots))}\n"\
                        f"–ë—É–º–∞–≥ –≤ –ª–æ—Ç–µ: {in_lot_figi(figi=i.figi, user_id=user_id)}\n\n"\
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±—É–º–∞–≥–∏: {round(quotation_to_float(i.average_position_price), 4)}{get_currency_sing(i.average_position_price.currency)}\n"\
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞: {round(quotation_to_float(i.average_position_price)*in_lot_figi(figi=i.figi, user_id=user_id), 4)}{get_currency_sing(i.average_position_price.currency)}\n\n"\
                        f"–ò—Ç–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(quotation_to_float(i.average_position_price)*quotation_to_float(i.quantity), 4)}{get_currency_sing(i.average_position_price.currency)}\n "
                    else:
                        text = f"üßæ<b>{inst} {security_name_by_figi(figi=i.figi, user_id=user_id)}</b>\n"\
                        f"FIGI: {i.figi}\n\n"\
                        f"–õ–æ—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {int(quotation_to_float(i.quantity_lots))}\n"\
                        f"–ë—É–º–∞–≥ –≤ –ª–æ—Ç–µ: {in_lot_figi(figi=i.figi, user_id=user_id)}\n\n"\
                        f"–¶–µ–Ω–∞ –±—É–º–∞–≥–∏: {round(quotation_to_float(i.current_price), 4)}{get_currency_sing(i.current_price.currency)}\n"\
                        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞: {round(quotation_to_float(i.current_price)*in_lot_figi(figi=i.figi, user_id=user_id), 4)}{get_currency_sing(i.average_position_price.currency)}\n\n"\
                        f"–ò—Ç–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(quotation_to_float(i.current_price)*quotation_to_float(i.quantity), 4)}{get_currency_sing(i.average_position_price.currency)}\n"

                    await bot.send_message(chat_id=user_id, text=text,reply_markup=sell_keyboard)

        if empty_portfolio:
            await bot.send_message(chat_id=user_id, text=f"<b>–£ –í–∞—Å –Ω–µ—Ç –±—É–º–∞–≥!</b>")
    else:
        await bot.send_message(chat_id=message.from_user.id, text=f"<b>–£ –í–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è!</b>")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("sell:figi"))
async def s_choose_quantity(callback_query, state: FSMContext):
    data = callback_query.data.split(":")
    figi = data[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∞–∫—Ü–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
    if is_in_portfolio(figi, user_id=callback_query.from_user.id):
        if check_time(user_id=callback_query.from_user.id, figi=figi)[0] or get_account_type(
                user_id=callback_query.from_user.id) == "sandbox":

            lot_keyboard = ReplyKeyboardMarkup()
            av_lots = get_lots_portfolio(figi=figi, user_id=callback_query.from_user.id)
            for i in range(av_lots):
                lot_keyboard.add(f"{i + 1}")
                if i == 6:
                    break
            lot_keyboard.add(f"–û—Ç–º–µ–Ω–∞")

            # –í–∫–ª—é—á–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await bot.send_message(chat_id=callback_query.from_user.id, text=f"–î–æ—Å—Ç—É–ø–Ω–æ –ª–æ—Ç–æ–≤: {av_lots}\n–£–∫–∞–∂–∏—Ç–µ "
                                                                             f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
                                   reply_markup=lot_keyboard)

            # –ó–∞–ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –æ FIGI –≤ –ø–∞–º—è—Ç—å
            await state.update_data(s_chosen_figi=figi)

            # –ü–µ—Ä–µ–π–¥—ë–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await SellOrder.s_wait_quantity.set()
            return

        else:
            await state.reset_state()
            await bot.send_message(chat_id=callback_query.from_user.id, text="–¢–æ—Ä–≥–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å!")
            await bot.send_message(chat_id=callback_query.from_user.id,
                                   text=check_time(user_id=callback_query.from_user.id, figi=callback_query.text)[1],
                                   reply_markup=get_start_menu(callback_query.from_user.id))

    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å
    else:
        await bot.send_message(chat_id=callback_query.from_user.id, text="–¢–∞–∫–æ–π –±—É–º–∞–≥–∏ –Ω–µ—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ!")
        return


"""
    –¢—Ä–µ—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ s_wait_quantity
"""


@dp.message_handler(state=SellOrder.s_wait_quantity)
async def s_choose_price(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∏–º —Ü–µ–Ω—É –±—É–º–∞–≥–∏
    try:
        int(message.text)
    except:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    else:
        user_data = await state.get_data()
        price = get_price_in_portfolio(user_data['s_chosen_figi'], user_id=message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        if get_lots_portfolio(user_data['s_chosen_figi'], user_id=message.from_user.id) >= int(message.text) > 0:

            # –ó–∞–ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –ø–∞–º—è—Ç—å
            await state.update_data(s_chosen_quantity=message.text)

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–Ω–∞–º–∏
            # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω –Ω–∞ 1% –∏ 2% –º–µ–Ω—å—à–µ/–±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π
            # –ü—Ä–∏ —ç—Ç–æ–º —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ü–µ–Ω—É
            price_keyboard = ReplyKeyboardMarkup()

            price_keyboard.add(f"–õ—É—á—à–∞—è —Ü–µ–Ω–∞")
            price_keyboard.add(f"{round(price * 1.02, 5)}")
            price_keyboard.add(f"{round(price * 1.01, 5)}")
            price_keyboard.add(f"{round(price * 1.00, 6)}")
            price_keyboard.add(f"{round(price * 0.99, 5)}")
            price_keyboard.add(f"{round(price * 0.98, 5)}")
            price_keyboard.add(f"–û—Ç–º–µ–Ω–∞")

            # –í–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –±—É–º–∞–≥—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é):",
                                 reply_markup=price_keyboard)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await SellOrder.s_wait_price.set()
            return

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —á–∏—Å–ª–æ –ª–æ—Ç–æ–≤!")
            return


"""
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ s_wait_price
"""


@dp.message_handler(state=SellOrder.s_wait_price)
async def s_finish(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –±—É–º–∞–≥–∏

    if message.text == "–õ—É—á—à–∞—è —Ü–µ–Ω–∞":

        user_data = await state.get_data()

        # –ü—Ä–æ–¥–∞—ë–º –±—É–º–∞–≥–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º

        await state.finish()

        order = sell_sfb(figi=user_data['s_chosen_figi'], price=0.0,
                         quantity_lots=int(user_data['s_chosen_quantity']), user_id=message.from_user.id, via="bot")

        if order:
            await message.answer(
                f"–ü—Ä–æ–¥–∞–∂–∞ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ {security_name_by_figi(order.figi, message.from_user.id)} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {order.lots_requested} –ª–æ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ {quotation_to_float(order.initial_order_price)}{get_currency_sing(order.initial_order_price.currency)}.\n",
                reply_markup=get_start_menu(message.from_user.id))
        else:
            await message.answer("–û—à–∏–±–∫–∞!")

    else:
        try:
            float(message.text)
        except:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        else:
            user_data = await state.get_data()
            price = get_price_in_portfolio(user_data['s_chosen_figi'], user_id=message.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö

            if (price * 1.20) > float(message.text) > (price * 0.80):
                # –ü—Ä–æ–¥–∞—ë–º –±—É–º–∞–≥–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º

                await state.finish()

                order = sell_sfb(figi=user_data['s_chosen_figi'], price=float(message.text),
                                 quantity_lots=int(user_data['s_chosen_quantity']), user_id=message.from_user.id,
                                 via="bot")

                if order:
                    await message.answer(
                        f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ {security_name_by_figi(order.figi,message.from_user.id)} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {order.lots_requested} –ª–æ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ {quotation_to_float(order.initial_order_price)}{get_currency_sing(order.initial_order_price.currency)}.\n",
                        reply_markup=get_start_menu(message.from_user.id))
                else:
                    await message.answer("–û—à–∏–±–∫–∞!")


            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            else:
                await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å!")
                return
